name: Sync Secrets

on:
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      repositories:
        description: "Regex expressions to select target repositories."
        required: true
        type: string
      dry_run:
        description: "Dry-run"
        required: true
        type: boolean
        default: true

env:
  SECRETS_DELETE: |
    ^LINTER_VALIDATE_ALL_CODEBASE$
  SECRETS_SYNC: |
    ^SYNC_PAT$
  REPO_LIST_REGEX: true
  SYNC_PAT: ${{ secrets.SYNC_PAT }}
  LINTER_VALIDATE_ALL_CODEBASE: '---'

jobs:
  sync:
    name: Sync Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Delete Secrets
        uses: actions/github-script@v6
        if: ${{ github.event_name == 'pull_request' }}
        env:
          REPOSITORY_PATTERN: '^${{ github.repository }}$'
          SECRET_PATTERNS: ${{ env.SECRETS_DELETE }}
          DRY_RUN: true
        with:
          github-token: ${{ secrets.SYNC_PAT }}
          script: |
            if (process.env.DRY_RUN === 'true') { console.log(`[DRY_RUN='true'] No secrets will be deleted.`); }
            console.log(`REPOSITORY_PATTERN: ${JSON.stringify(process.env.REPOSITORY_PATTERN)}`);
            const secretPatterns = process.env.SECRET_PATTERNS.split(/\r?\n/).filter((element) => element);
            console.log(`SECRET_PATTERNS: ${JSON.stringify(secretPatterns)}`);
            github.paginate(
                github.rest.repos.listForAuthenticatedUser, 
                (response) => response.data
                  .filter((repo) => repo.full_name.search(new RegExp(process.env.REPOSITORY_PATTERN)) >= 0)
                  .map((repo) => ({full_name: repo.full_name, name: repo.name, owner: repo.owner.login}))
              )
              .then((repos) => {
                console.log(`FOUND_REPOSITORIES: ${JSON.stringify(repos.map((repo) => repo.full_name))}`);
                repos.forEach((repo) => {
                  github.paginate(
                    github.rest.actions.listRepoSecrets,
                    {
                      owner: repo.owner,
                      repo: repo.name
                    },
                    (response) => response.data.map((secret) => secret.name)
                  )
                  .then((secrets) => {
                    secretPatterns.forEach((pattern) => {
                      secrets.filter((secret) => secret.search(new RegExp(pattern)) >= 0).forEach((matchedSecret) => {
                        console.log(`Delete ${matchedSecret} from ${repo.full_name}`);
                        if (process.env.DRY_RUN === 'false') {
                          github.rest.actions.deleteRepoSecret({
                            owner: repo.owner,
                            repo: repo.name,
                            secret_name: matchedSecret
                          });
                        }
                      });
                    });
                  })
                })
              })
      - name: Sync Secrets
        uses: google/secrets-sync-action@v1.7.0
        if: ${{ github.event_name == 'pull_request' }}
        with:
          secrets: ${{ env.SECRETS_SYNC }}
          repositories: "^${{ github.repository }}$"
          repositories_list_regex: ${{ env.REPO_LIST_REGEX }}
          github_token: ${{ secrets.SYNC_PAT }}
          dry_run: true
      - name: Delete Secrets
        uses: actions/github-script@v6
        if: ${{ github.event_name == 'workflow_dispatch' }}
        env:
          REPOSITORY_PATTERN: ${{ github.event.inputs.repositories }}
          SECRET_PATTERNS: ${{ env.SECRETS_DELETE }}
          DRY_RUN: ${{ github.event.inputs.dry_run }}
        with:
          github-token: ${{ secrets.SYNC_PAT }}
          script: |
            if (process.env.DRY_RUN === 'true') { console.log(`[DRY_RUN='true'] No secrets will be deleted.`); }
            console.log(`REPOSITORY_PATTERN: ${JSON.stringify(process.env.REPOSITORY_PATTERN)}`);
            const secretPatterns = process.env.SECRET_PATTERNS.split(/\r?\n/).filter((element) => element);
            console.log(`SECRET_PATTERNS: ${JSON.stringify(secretPatterns)}`);
            github.paginate(
                github.rest.repos.listForAuthenticatedUser, 
                (response) => response.data
                  .filter((repo) => repo.full_name.search(new RegExp(process.env.REPOSITORY_PATTERN)) >= 0)
                  .map((repo) => ({full_name: repo.full_name, name: repo.name, owner: repo.owner.login}))
              )
              .then((repos) => {
                console.log(`FOUND_REPOSITORIES: ${JSON.stringify(repos.map((repo) => repo.full_name))}`);
                repos.forEach((repo) => {
                  github.paginate(
                    github.rest.actions.listRepoSecrets,
                    {
                      owner: repo.owner,
                      repo: repo.name
                    },
                    (response) => response.data.map((secret) => secret.name)
                  )
                  .then((secrets) => {
                    secretPatterns.forEach((pattern) => {
                      secrets.filter((secret) => secret.search(new RegExp(pattern)) >= 0).forEach((matchedSecret) => {
                        console.log(`Delete ${matchedSecret} from ${repo.full_name}`);
                        if (process.env.DRY_RUN === 'false') {
                          github.rest.actions.deleteRepoSecret({
                            owner: repo.owner,
                            repo: repo.name,
                            secret_name: matchedSecret
                          });
                        }
                      });
                    });
                  })
                })
              })
      - name: Sync Secrets
        uses: google/secrets-sync-action@v1.7.0
        if: ${{ github.event_name == 'workflow_dispatch' }}
        with:
          secrets: ${{ env.SECRETS_SYNC }}
          repositories: ${{ github.event.inputs.repositories }}
          repositories_list_regex: ${{ env.REPO_LIST_REGEX }}
          github_token: ${{ secrets.SYNC_PAT }}
          dry_run: ${{ github.event.inputs.dry_run }}